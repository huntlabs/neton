// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

module etcdserverpb.rpc;

import google.protobuf;
import etcdserverpb.kv;

enum protocVersion = 3006001;

class ResponseHeader
{
    @Proto(1) ulong clusterId = protoDefaultValue!ulong;
    @Proto(2) ulong memberId = protoDefaultValue!ulong;
    @Proto(3) long revision = protoDefaultValue!long;
    @Proto(4) ulong raftTerm = protoDefaultValue!ulong;
}

class RangeRequest
{
    @Proto(1) bytes key = protoDefaultValue!bytes;
    @Proto(2) bytes rangeEnd = protoDefaultValue!bytes;
    @Proto(3) long limit = protoDefaultValue!long;
    @Proto(4) long revision = protoDefaultValue!long;
    @Proto(5) SortOrder sortOrder = protoDefaultValue!SortOrder;
    @Proto(6) SortTarget sortTarget = protoDefaultValue!SortTarget;
    @Proto(7) bool serializable = protoDefaultValue!bool;
    @Proto(8) bool keysOnly = protoDefaultValue!bool;
    @Proto(9) bool countOnly = protoDefaultValue!bool;
    @Proto(10) long minModRevision = protoDefaultValue!long;
    @Proto(11) long maxModRevision = protoDefaultValue!long;
    @Proto(12) long minCreateRevision = protoDefaultValue!long;
    @Proto(13) long maxCreateRevision = protoDefaultValue!long;

    enum SortOrder
    {
        NONE = 0,
        ASCEND = 1,
        DESCEND = 2,
    }

    enum SortTarget
    {
        KEY = 0,
        VERSION = 1,
        CREATE = 2,
        MOD = 3,
        VALUE = 4,
    }
}

class RangeResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) KeyValue[] kvs = protoDefaultValue!(KeyValue[]);
    @Proto(3) bool more = protoDefaultValue!bool;
    @Proto(4) long count = protoDefaultValue!long;
}

class PutRequest
{
    @Proto(1) bytes key = protoDefaultValue!bytes;
    @Proto(2) bytes value = protoDefaultValue!bytes;
    @Proto(3) long lease = protoDefaultValue!long;
    @Proto(4) bool prevKv = protoDefaultValue!bool;
    @Proto(5) bool ignoreValue = protoDefaultValue!bool;
    @Proto(6) bool ignoreLease = protoDefaultValue!bool;
}

class PutResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) KeyValue prevKv = protoDefaultValue!KeyValue;
}

class DeleteRangeRequest
{
    @Proto(1) bytes key = protoDefaultValue!bytes;
    @Proto(2) bytes rangeEnd = protoDefaultValue!bytes;
    @Proto(3) bool prevKv = protoDefaultValue!bool;
}

class DeleteRangeResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) long deleted = protoDefaultValue!long;
    @Proto(3) KeyValue[] prevKvs = protoDefaultValue!(KeyValue[]);
}

class WatchRequest
{
    enum RequestUnionCase
    {
        requestUnionNotSet = 0,
        createRequest = 1,
        cancelRequest = 2,
    }
    RequestUnionCase _requestUnionCase = RequestUnionCase.requestUnionNotSet;
    @property RequestUnionCase requestUnionCase() { return _requestUnionCase; }
    void clearRequestUnion() { _requestUnionCase = RequestUnionCase.requestUnionNotSet; }
    @Oneof("_requestUnionCase") union
    {
        @Proto(1) WatchCreateRequest _createRequest = protoDefaultValue!WatchCreateRequest; mixin(oneofAccessors!_createRequest);
        @Proto(2) WatchCancelRequest _cancelRequest; mixin(oneofAccessors!_cancelRequest);
    }
}

class WatchCreateRequest
{
    @Proto(1) bytes key = protoDefaultValue!bytes;
    @Proto(2) bytes rangeEnd = protoDefaultValue!bytes;
    @Proto(3) long startRevision = protoDefaultValue!long;
    @Proto(4) bool progressNotify = protoDefaultValue!bool;
    @Proto(5) FilterType[] filters = protoDefaultValue!(FilterType[]);
    @Proto(6) bool prevKv = protoDefaultValue!bool;
    @Proto(7) long watchId = protoDefaultValue!long;
    @Proto(8) bool fragment = protoDefaultValue!bool;

    enum FilterType
    {
        NOPUT = 0,
        NODELETE = 1,
    }
}

class WatchCancelRequest
{
    @Proto(1) long watchId = protoDefaultValue!long;
}

class WatchResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) long watchId = protoDefaultValue!long;
    @Proto(3) bool created = protoDefaultValue!bool;
    @Proto(4) bool canceled = protoDefaultValue!bool;
    @Proto(5) long compactRevision = protoDefaultValue!long;
    @Proto(6) string cancelReason = protoDefaultValue!string;
    @Proto(7) bool fragment = protoDefaultValue!bool;
    @Proto(11) Event[] events = protoDefaultValue!(Event[]);
}

class LeaseGrantRequest
{
    @Proto(1) long TTL = protoDefaultValue!long;
    @Proto(2) long ID = protoDefaultValue!long;
}

class LeaseGrantResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) long ID = protoDefaultValue!long;
    @Proto(3) long TTL = protoDefaultValue!long;
    @Proto(4) string error = protoDefaultValue!string;
}

class LeaseRevokeRequest
{
    @Proto(1) long ID = protoDefaultValue!long;
}

class LeaseRevokeResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
}

class LeaseCheckpoint
{
    @Proto(1) long ID = protoDefaultValue!long;
    @Proto(2) long remainingTTL = protoDefaultValue!long;
}

class LeaseCheckpointRequest
{
    @Proto(1) LeaseCheckpoint[] checkpoints = protoDefaultValue!(LeaseCheckpoint[]);
}

class LeaseCheckpointResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
}

class LeaseKeepAliveRequest
{
    @Proto(1) long ID = protoDefaultValue!long;
}

class LeaseKeepAliveResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) long ID = protoDefaultValue!long;
    @Proto(3) long TTL = protoDefaultValue!long;
}

class LeaseTimeToLiveRequest
{
    @Proto(1) long ID = protoDefaultValue!long;
    @Proto(2) bool keys = protoDefaultValue!bool;
}

class LeaseTimeToLiveResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) long ID = protoDefaultValue!long;
    @Proto(3) long TTL = protoDefaultValue!long;
    @Proto(4) long grantedTTL = protoDefaultValue!long;
    @Proto(5) bytes[] keys = protoDefaultValue!(bytes[]);
}

class LeaseLeasesRequest
{
}

class LeaseStatus
{
    @Proto(1) long ID = protoDefaultValue!long;
}

class LeaseLeasesResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) LeaseStatus[] leases = protoDefaultValue!(LeaseStatus[]);
}

class Member
{
    @Proto(1) ulong ID = protoDefaultValue!ulong;
    @Proto(2) string name = protoDefaultValue!string;
    @Proto(3) string[] peerURLs = protoDefaultValue!(string[]);
    @Proto(4) string[] clientURLs = protoDefaultValue!(string[]);
}

class MemberAddRequest
{
    @Proto(1) string[] peerURLs = protoDefaultValue!(string[]);
}

class MemberAddResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) Member member = protoDefaultValue!Member;
    @Proto(3) Member[] members = protoDefaultValue!(Member[]);
}

class MemberRemoveRequest
{
    @Proto(1) ulong ID = protoDefaultValue!ulong;
}

class MemberRemoveResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) Member[] members = protoDefaultValue!(Member[]);
}

class MemberUpdateRequest
{
    @Proto(1) ulong ID = protoDefaultValue!ulong;
    @Proto(2) string[] peerURLs = protoDefaultValue!(string[]);
}

class MemberUpdateResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) Member[] members = protoDefaultValue!(Member[]);
}

class MemberListRequest
{
}

class MemberListResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
    @Proto(2) Member[] members = protoDefaultValue!(Member[]);
}

class DefragmentRequest
{
}

class DefragmentResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
}

class MoveLeaderRequest
{
    @Proto(1) ulong targetID = protoDefaultValue!ulong;
}

class MoveLeaderResponse
{
    @Proto(1) ResponseHeader header = protoDefaultValue!ResponseHeader;
}
